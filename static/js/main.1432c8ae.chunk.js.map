{"version":3,"sources":["SideBar/StyledSideBar.tsx","SideBar/StyledSideBarElement.tsx","SideBar/StyledSideBarColumnOption.tsx","SideBar/SideBarColumnOption.tsx","SideBar/SideBarColumnAdd.tsx","SideBar/SideBarColumnEdit.tsx","SideBar/MoveDirection.tsx","SideBar/SideBarElement.tsx","SideBar/StyedSideBarGroupForm.tsx","SideBar/StyledSideBarGroupAdd.tsx","SideBar/SideBarGroupAdd.tsx","SideBar/SideBar.tsx","SideBar/StyledToggleSidebar.tsx","SideBar/ToggleSidebar.tsx","DataSource/DataFilters/BooleanFilter.tsx","DataSource/DataFilters/DateFilter.tsx","DataSource/DataFilters/NumberFilter.tsx","DataSource/DataFilters/SelectionFilter.tsx","DataSource/DataFilters/StringFilter.tsx","DataSource/GridStructure/DummyData.tsx","DataSource/DataSource.tsx","DataSource/GridStructure/HeadersData.tsx","StyledApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledSideBar","styled","div","props","isVisible","StyledSideBarElement","StyledSideBarColumnOption","SideBarColumnOption","useState","optionValue","updateOptionValue","iconValue","updateIconValue","useEffect","currentOption","name","icon","findColumn","column","style","display","justifyContent","alignItems","canRemove","onClick","removeOption","className","aria-hidden","type","value","onChange","e","target","addNewOption","SideBarColumnAdd","isToggled","updateisToggled","columnName","updateColumnName","ColumnTypes","text","columnType","updateColumnType","ColumnSizes","StandardColumn","columnSize","updateColumnSize","ColumnCollapsable","fixed","columnCollapsable","updateColumnCollapsable","MinimumVisibility","MediumVisible","columnVisibility","updateColumnVisibility","optionAddVisibility","optionAddVisiblityUpdate","padding","flexDirection","border","onInput","currentTarget","Object","values","map","x","y","slice","addColumn","header","size","collapsable","minVisibility","addColumnOption","SideBarColumnEdit","MoveDirection","backgroundColor","editColumn","options","select","key","addOption","SideBarElement","marginTop","columnOrGrouping","marginLeft","fontWeight","moveGrouping","Down","moveColumn","Up","marginRight","removeColumn","StyledSideBarGroupForm","StyledSideBarGroupAdd","SideBarGroupAdd","toggled","updateToggled","paddingLeft","marginBottom","upperNewGroup","updateUpperNewGroup","addNewGroup","SideBar","bottomNewGroup","updatebottomNewGroup","headerName","newColumn","currentHeaderData","create","headers","forEach","grouping","columns","push","updateHeaderData","addOptionToColumn","newOption","currentColumn","undefined","concat","updatedColumn","initialColumn","index","columnToFind","doesExist","columnToMove","direction","indexOf","length","moveHeader","headerToMove","moveDirection","currentHeader","filter","moveIndex","toRemove","optionToRemove","option","toggledSideBar","setToggleSideBar","newGroup","unshift","Fragment","removeGroup","StyledToggleSidebar","ToggleSideBar","BooleanFilter","data","this","filters","entry","includes","DateFilter","operator","Date","toDateString","NumberFilter","parseInt","toString","SelectionFilter","all_filters","Array","StringFilter","startsWith","endsWith","ALPHABET","DummyData","headerData","dummyData","allKeys","z","flat","fill","_","i","valueCount","current","Math","floor","random","generatedDate","generateRandomDate","setHours","extractSelectionOptions","requiredColumn","columnGrouping","start","end","getTime","DataSource","generateDummyData","a","b","dateA","dateB","sort","returned_data","string_filters","number_filters","applyFilters","some","field_id","sort_type","_sort_function","reverse","page","pageIndex","currentPage","field_type","_sort_date_function","FirstOption","SecondOption","ThirdOption","Nr","SmallColumn","number","LargeVisible","Select","SmallVisible","Prenume","Nume","Valid","boolean","MaxVisible","Email","NrTelefon","DataNasterii","date","Detalii","Invisible","firstHeader","secondHeader","initialHeaders","StyledApp","App","pageSize","cacheSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1432c8ae.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledSideBar = styled.div<{ isVisible: boolean }>`\r\n  color: white;\r\n  background-color: black;\r\n  width: 20%;\r\n  padding: 0.8rem;\r\n  display: ${(props) => (props.isVisible ? \"block\" : \"none\")};\r\n  overflow-y: scroll;\r\n  height: 100vh;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: #888;\r\n  }\r\n\r\n  .fa {\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSideBarElement = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  p {\r\n    margin: 0px;\r\n  }\r\n\r\n  .icons-grouping {\r\n    .fa {\r\n      padding-left: 0.5rem;\r\n    }\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledSideBarColumnOption = styled.div<{ isVisible: boolean }>`\r\n  display: ${(props) => (props.isVisible ? \"flex\" : \"none\")};\r\n  flex-direction: column;\r\n  border-top: solid thin white;\r\n  border-bottom: solid thin white;\r\n  margin-top: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: black;\r\n`;\r\n\r\nexport default StyledSideBarColumnOption;\r\n","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { IColumn } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumn\";\r\nimport { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\nimport StyledSideBarColumnOption from \"./StyledSideBarColumnOption\";\r\n\r\nfunction SideBarColumnOption(props: {\r\n  currentOption: IColumnOptions;\r\n  column: IColumn;\r\n  isVisible: boolean;\r\n  addNewOption: (\r\n    newOption: IColumnOptions,\r\n    currentOption: IColumnOptions,\r\n    column: IColumn\r\n  ) => void;\r\n  canRemove: boolean;\r\n  removeOption: (\r\n    currentColumn: IColumn,\r\n    optionToRemove: IColumnOptions\r\n  ) => void;\r\n  findColumn: (columnToFind: IColumn) => boolean;\r\n}) {\r\n  const [optionValue, updateOptionValue] = useState(\"\");\r\n  const [iconValue, updateIconValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    updateOptionValue(props.currentOption.name);\r\n    updateIconValue(props.currentOption.icon);\r\n  }, [\r\n    props.currentOption.name,\r\n    props.currentOption.icon,\r\n    updateOptionValue,\r\n    updateIconValue,\r\n  ]);\r\n\r\n  return (\r\n    <StyledSideBarColumnOption\r\n      isVisible={props.isVisible && props.findColumn(props.column)}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <div>Option: </div>\r\n        <i\r\n          style={{ display: props.canRemove === true ? \"block\" : \"none\" }}\r\n          onClick={() =>\r\n            props.removeOption(props.column, {\r\n              name: optionValue,\r\n              icon: iconValue,\r\n            })\r\n          }\r\n          className=\"fa fa-times\"\r\n          aria-hidden=\"true\"\r\n        ></i>\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={optionValue}\r\n        onChange={(e) => {\r\n          updateOptionValue(e.target.value);\r\n        }}\r\n      ></input>\r\n      <div>Icon (FA - 4): </div>\r\n      <input\r\n        type=\"text\"\r\n        value={iconValue}\r\n        onChange={(e) => {\r\n          updateIconValue(e.target.value);\r\n        }}\r\n      ></input>\r\n      <br></br>\r\n      <button\r\n        onClick={() => {\r\n          props.addNewOption(\r\n            {\r\n              name: optionValue,\r\n              icon: iconValue,\r\n            } as IColumnOptions,\r\n            props.currentOption,\r\n            props.column\r\n          );\r\n          updateOptionValue(\"\");\r\n          updateIconValue(\"\");\r\n        }}\r\n      >\r\n        {props.canRemove === true ? \"Edit Current Option\" : \"Add New Option\"}\r\n      </button>\r\n      <br></br>\r\n    </StyledSideBarColumnOption>\r\n  );\r\n}\r\n\r\nexport default SideBarColumnOption;\r\n","import React, { useState } from \"react\";\r\nimport { ColumnTypes } from \"custom-grid-jm/Grid/CustomTypes/ColumnTypes\";\r\nimport { ColumnSizes } from \"custom-grid-jm/Grid/CustomTypes/ColumnSizes\";\r\nimport { ColumnCollapsable } from \"custom-grid-jm/Grid/CustomTypes/ColumnCollapsable\";\r\nimport { MinimumVisibility } from \"custom-grid-jm/Grid/CustomTypes/ColumnVisibility\";\r\nimport { IColumn } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumn\";\r\nimport { StyledSideBarElement } from \"./StyledSideBarElement\";\r\nimport SideBarColumnOption from \"./SideBarColumnOption\";\r\nimport { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\n\r\nfunction SideBarColumnAdd(props: {\r\n  header: string;\r\n  addColumn: (headerName: string, newColumn: IColumn) => void;\r\n  findColumn: (columnToFind: IColumn) => boolean;\r\n  addColumnOption: (\r\n    newOption: IColumnOptions,\r\n    currentOption: IColumnOptions,\r\n    columnName: IColumn\r\n  ) => void;\r\n  removeOption: (\r\n    currentColumn: IColumn,\r\n    optionToRemove: IColumnOptions\r\n  ) => void;\r\n}) {\r\n  const [isToggled, updateisToggled] = useState(false);\r\n\r\n  const [columnName, updateColumnName] = useState(\"\");\r\n\r\n  const [columnType, updateColumnType] = useState<ColumnTypes>(\r\n    ColumnTypes.text\r\n  );\r\n\r\n  const [columnSize, updateColumnSize] = useState<ColumnSizes>(\r\n    ColumnSizes.StandardColumn\r\n  );\r\n\r\n  const [columnCollapsable, updateColumnCollapsable] =\r\n    useState<ColumnCollapsable>(ColumnCollapsable.fixed);\r\n\r\n  const [columnVisibility, updateColumnVisibility] =\r\n    useState<MinimumVisibility>(MinimumVisibility.MediumVisible);\r\n\r\n  const [optionAddVisibility, optionAddVisiblityUpdate] =\r\n    useState<boolean>(false);\r\n\r\n  return (\r\n    <div>\r\n      <StyledSideBarElement>\r\n        <div style={{ padding: \"0.5rem\" }}>Add New Column</div>\r\n        <i\r\n          className={`${\r\n            isToggled === false ? \"fa fa fa-plus\" : \"fa fa fa-minus\"\r\n          }`}\r\n          aria-hidden=\"true\"\r\n          onClick={() => updateisToggled(isToggled === true ? false : true)}\r\n        ></i>\r\n      </StyledSideBarElement>\r\n      <div\r\n        style={{\r\n          display: `${isToggled === true ? \"flex\" : \"none\"}`,\r\n          flexDirection: \"column\",\r\n          justifyContent: \"space-evenly\",\r\n          padding: \"0.5rem\",\r\n          border: \"1px solid white\",\r\n        }}\r\n      >\r\n        <div>Column Name:</div>\r\n        <input\r\n          value={columnName}\r\n          type=\"text\"\r\n          onInput={(e) => {\r\n            updateColumnName(e.currentTarget.value);\r\n          }}\r\n        ></input>\r\n        <div>Column Type:</div>\r\n        <select\r\n          value={columnType}\r\n          onChange={(e) => {\r\n            updateColumnType(e.target.value as ColumnTypes);\r\n            e.target.value === \"select\"\r\n              ? optionAddVisiblityUpdate(true)\r\n              : optionAddVisiblityUpdate(false);\r\n          }}\r\n        >\r\n          {Object.values(ColumnTypes).map((x, y: number) => {\r\n            return <option key={y}>{x}</option>;\r\n          })}\r\n        </select>\r\n        <div>Column Size:</div>\r\n        <select\r\n          value={columnSize}\r\n          onChange={(e) => {\r\n            updateColumnSize(e.target.value as ColumnSizes);\r\n          }}\r\n        >\r\n          {Object.values(ColumnSizes)\r\n            .slice(1)\r\n            .map((x, y: number) => {\r\n              return <option key={y}>{x}</option>;\r\n            })}\r\n        </select>\r\n        <div>Collapsable State:</div>\r\n        <select\r\n          value={columnCollapsable}\r\n          onChange={(e) => {\r\n            updateColumnCollapsable(e.target.value as ColumnCollapsable);\r\n          }}\r\n        >\r\n          {Object.values(ColumnCollapsable).map((x, y: number) => {\r\n            return <option key={y}>{x}</option>;\r\n          })}\r\n        </select>\r\n        <div>Visibility:</div>\r\n        <select\r\n          value={columnVisibility}\r\n          onChange={(e) => {\r\n            updateColumnVisibility(e.target.value as MinimumVisibility);\r\n          }}\r\n        >\r\n          {Object.values(MinimumVisibility).map((x, y: number) => {\r\n            return <option key={y}>{x}</option>;\r\n          })}\r\n        </select>\r\n        <br></br>\r\n        <button\r\n          onClick={() =>\r\n            props.addColumn(props.header, {\r\n              name: columnName,\r\n              type: columnType,\r\n              size: columnSize,\r\n              collapsable: columnCollapsable,\r\n              minVisibility: columnVisibility,\r\n            })\r\n          }\r\n        >\r\n          Add Column\r\n        </button>\r\n        <SideBarColumnOption\r\n          canRemove={false}\r\n          currentOption={{ name: \"\", icon: \"\" }}\r\n          isVisible={optionAddVisibility}\r\n          addNewOption={props.addColumnOption}\r\n          column={{\r\n            name: columnName,\r\n            type: columnType,\r\n            size: columnSize,\r\n            collapsable: columnCollapsable,\r\n            minVisibility: columnVisibility,\r\n          }}\r\n          findColumn={props.findColumn}\r\n          removeOption={props.removeOption}\r\n        ></SideBarColumnOption>\r\n        {props.findColumn({\r\n          name: columnName,\r\n          type: columnType,\r\n          size: columnSize,\r\n          collapsable: columnCollapsable,\r\n          minVisibility: columnVisibility,\r\n        }) === true\r\n          ? \"\"\r\n          : \"\"}\r\n        <br></br>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBarColumnAdd;\r\n","import { useEffect, useState } from \"react\";\r\nimport SideBarColumnOption from \"./SideBarColumnOption\";\r\nimport { ColumnCollapsable } from \"custom-grid-jm/Grid/CustomTypes/ColumnCollapsable\";\r\nimport { ColumnSizes } from \"custom-grid-jm/Grid/CustomTypes/ColumnSizes\";\r\nimport { ColumnTypes } from \"custom-grid-jm/Grid/CustomTypes/ColumnTypes\";\r\nimport { MinimumVisibility } from \"custom-grid-jm/Grid/CustomTypes/ColumnVisibility\";\r\nimport { IColumn } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumn\";\r\nimport { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\n\r\nfunction SideBarColumnEdit(props: {\r\n  isToggled: boolean;\r\n  column: IColumn;\r\n  editColumn: (editedColumn: IColumn, initialColumn: IColumn) => void;\r\n  addOption: (\r\n    newOption: IColumnOptions,\r\n    currentOption: IColumnOptions,\r\n    currentColumn: IColumn\r\n  ) => void;\r\n  removeOption: (\r\n    currentColumn: IColumn,\r\n    optionToRemove: IColumnOptions\r\n  ) => void;\r\n  findColumn: (columnToFind: IColumn) => boolean;\r\n}) {\r\n  const [columnName, updateColumnName] = useState(props.column.name);\r\n\r\n  const [columnType, updateColumnType] = useState<ColumnTypes>(\r\n    props.column.type as ColumnTypes\r\n  );\r\n\r\n  const [columnSize, updateColumnSize] = useState<ColumnSizes>(\r\n    props.column.size as ColumnSizes\r\n  );\r\n\r\n  const [columnCollapsable, updateColumnCollapsable] =\r\n    useState<ColumnCollapsable>(props.column.collapsable);\r\n\r\n  const [columnVisibility, updateColumnVisibility] =\r\n    useState<MinimumVisibility>(props.column.minVisibility);\r\n\r\n  useEffect(() => {\r\n    updateColumnName(props.column.name);\r\n    updateColumnType(props.column.type as ColumnTypes);\r\n    updateColumnSize(props.column.size);\r\n    updateColumnCollapsable(props.column.collapsable);\r\n    updateColumnVisibility(props.column.minVisibility);\r\n  }, [\r\n    props.column.name,\r\n    props.column.type,\r\n    props.column.size,\r\n    props.column.collapsable,\r\n    props.column.minVisibility,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: `${props.isToggled ? \"flex\" : \"none\"}`,\r\n          flexDirection: \"column\",\r\n          justifyContent: \"space-evenly\",\r\n          backgroundColor: \"black\",\r\n          padding: \"0.5rem\",\r\n        }}\r\n      >\r\n        <div>Column Name:</div>\r\n        <input\r\n          value={columnName}\r\n          type=\"text\"\r\n          onInput={(e) => {\r\n            updateColumnName(e.currentTarget.value);\r\n          }}\r\n        ></input>\r\n        <div>Column Type:</div>\r\n        <select\r\n          value={columnType}\r\n          onChange={(e) => {\r\n            updateColumnType(e.target.value as ColumnTypes);\r\n          }}\r\n        >\r\n          {Object.values(ColumnTypes).map((x, y: number) => {\r\n            return <option key={y}>{x}</option>;\r\n          })}\r\n        </select>\r\n        <div>Column Size:</div>\r\n        <select\r\n          value={columnSize}\r\n          onChange={(e) => {\r\n            updateColumnSize(e.target.value as ColumnSizes);\r\n          }}\r\n        >\r\n          {Object.values(ColumnSizes)\r\n            .slice(1)\r\n            .map((x, y: number) => {\r\n              return <option key={y}>{x}</option>;\r\n            })}\r\n        </select>\r\n        <div>Collapsable State:</div>\r\n        <select\r\n          value={columnCollapsable}\r\n          onChange={(e) => {\r\n            updateColumnCollapsable(e.target.value as ColumnCollapsable);\r\n          }}\r\n        >\r\n          {Object.values(ColumnCollapsable).map((x, y: number) => {\r\n            return <option key={y}>{x}</option>;\r\n          })}\r\n        </select>\r\n        <div>Min. Visibility:</div>\r\n        <select\r\n          value={columnVisibility}\r\n          onChange={(e) => {\r\n            updateColumnVisibility(e.target.value as MinimumVisibility);\r\n          }}\r\n        >\r\n          {Object.values(MinimumVisibility).map((x, y: number) => {\r\n            return <option key={y}>{x}</option>;\r\n          })}\r\n        </select>\r\n        <br></br>\r\n        <button\r\n          onClick={() =>\r\n            props.editColumn(\r\n              {\r\n                name: columnName,\r\n                type: columnType,\r\n                size: columnSize,\r\n                collapsable: columnCollapsable,\r\n                minVisibility: columnVisibility,\r\n                options: props.column.options,\r\n              },\r\n              props.column\r\n            )\r\n          }\r\n        >\r\n          Edit Column\r\n        </button>\r\n        {props.column.type === ColumnTypes.select\r\n          ? props.column.options?.map(\r\n              (currentOption: IColumnOptions, key: number) => {\r\n                return (\r\n                  <SideBarColumnOption\r\n                    key={key}\r\n                    addNewOption={props.addOption}\r\n                    currentOption={currentOption}\r\n                    column={props.column}\r\n                    canRemove={true}\r\n                    findColumn={props.findColumn}\r\n                    isVisible={props.column.type === ColumnTypes.select}\r\n                    removeOption={props.removeOption}\r\n                  ></SideBarColumnOption>\r\n                );\r\n              }\r\n            )\r\n          : \"\"}\r\n        {props.column.type === ColumnTypes.select ? (\r\n          <SideBarColumnOption\r\n            addNewOption={props.addOption}\r\n            currentOption={{ name: \"\", icon: \"\" }}\r\n            column={props.column}\r\n            canRemove={false}\r\n            findColumn={props.findColumn}\r\n            isVisible={props.column.type === ColumnTypes.select}\r\n            removeOption={props.removeOption}\r\n          ></SideBarColumnOption>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideBarColumnEdit;\r\n","enum MoveDirection {\r\n  Up,\r\n  Down,\r\n}\r\n\r\nexport default MoveDirection;\r\n","import { useState } from \"react\";\r\nimport { IColumn } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumn\";\r\nimport { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\nimport { IGrouping } from \"custom-grid-jm/Grid/Interfaces/GridBody/IGrouping\";\r\nimport SideBarColumnEdit from \"./SideBarColumnEdit\";\r\nimport MoveDirection from \"./MoveDirection\";\r\nimport { StyledSideBarElement } from \"./StyledSideBarElement\";\r\n\r\nfunction SideBarElement(props: {\r\n  columnOrGrouping: IColumn | IGrouping;\r\n  moveGrouping: (header: IGrouping, moveDirection: MoveDirection) => void;\r\n  removeColumn: (column: IColumn) => void;\r\n  editColumn: (editedColumn: IColumn, initialColumn: IColumn) => void;\r\n  moveColumn: (column: IColumn, direction: MoveDirection) => void;\r\n  findColumn: (columnToFind: IColumn) => boolean;\r\n  addOption: (\r\n    newOption: IColumnOptions,\r\n    currentOption: IColumnOptions,\r\n    currentColumn: IColumn\r\n  ) => void;\r\n  removeOption: (\r\n    currentColumn: IColumn,\r\n    optionToRemove: IColumnOptions\r\n  ) => void;\r\n}) {\r\n  const [isToggled, updateisToggled] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"gray\",\r\n        padding: \"0.5rem 0rem 0.5rem 0rem\",\r\n        marginTop: \"columns\" in props.columnOrGrouping ? \"2rem\" : \"\",\r\n      }}\r\n    >\r\n      <StyledSideBarElement>\r\n        <p\r\n          style={\r\n            {\r\n              marginLeft: \"0.5rem\",\r\n              fontWeight: `${\r\n                \"columns\" in props.columnOrGrouping ? \"bold\" : \"\"\r\n              }`,\r\n            } as React.CSSProperties\r\n          }\r\n        >\r\n          {props.columnOrGrouping.name}\r\n        </p>\r\n        <div className=\"icons-grouping\">\r\n          <i\r\n            className=\"fa fa-arrow-down\"\r\n            aria-hidden=\"true\"\r\n            onClick={() =>\r\n              !(\"columns\" in props.columnOrGrouping)\r\n                ? props.moveColumn(\r\n                    props.columnOrGrouping as IColumn,\r\n                    MoveDirection.Down\r\n                  )\r\n                : props.moveGrouping(\r\n                    props.columnOrGrouping as IGrouping,\r\n                    MoveDirection.Down\r\n                  )\r\n            }\r\n          ></i>\r\n          <i\r\n            className=\"fa fa-arrow-up\"\r\n            aria-hidden=\"true\"\r\n            onClick={() => {\r\n              !(\"columns\" in props.columnOrGrouping)\r\n                ? props.moveColumn(\r\n                    props.columnOrGrouping as IColumn,\r\n                    MoveDirection.Up\r\n                  )\r\n                : props.moveGrouping(\r\n                    props.columnOrGrouping as IGrouping,\r\n                    MoveDirection.Up\r\n                  );\r\n            }}\r\n          ></i>\r\n          {!(\"columns\" in props.columnOrGrouping) ? (\r\n            <i\r\n              className=\"fa fa-pencil-square-o\"\r\n              onClick={() => updateisToggled(isToggled === true ? false : true)}\r\n              aria-hidden=\"true\"\r\n            ></i>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <i\r\n            style={{ marginRight: \"0.5rem\" }}\r\n            className=\"fa fa-trash\"\r\n            aria-hidden=\"true\"\r\n            onClick={() => {\r\n              props.removeColumn(props.columnOrGrouping as IColumn);\r\n            }}\r\n          ></i>\r\n        </div>\r\n      </StyledSideBarElement>\r\n      <div\r\n        style={{\r\n          display: `${\"columns\" in props.columnOrGrouping ? \"none\" : \"block\"}`,\r\n        }}\r\n      >\r\n        <SideBarColumnEdit\r\n          isToggled={isToggled}\r\n          column={props.columnOrGrouping as IColumn}\r\n          editColumn={props.editColumn}\r\n          addOption={props.addOption}\r\n          removeOption={props.removeOption}\r\n          findColumn={props.findColumn}\r\n        ></SideBarColumnEdit>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBarElement;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSideBarGroupForm = styled.div<{ isToggled: boolean }>`\r\n  display: ${(props) => (props.isToggled ? \"block\" : \"none\")};\r\n  border: 1px solid white;\r\n  padding: 0.5rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSideBarGroupAdd = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { StyledSideBarGroupForm } from \"./StyedSideBarGroupForm\";\r\nimport { StyledSideBarElement } from \"./StyledSideBarElement\";\r\nimport { StyledSideBarGroupAdd } from \"./StyledSideBarGroupAdd\";\r\n\r\nfunction SideBarGroupAdd(props: {\r\n  upperNewGroup: string;\r\n  updateUpperNewGroup: (value: string) => void;\r\n  addNewGroup: (value: string) => void;\r\n}) {\r\n  const [toggled, updateToggled] = useState(false);\r\n\r\n  return (\r\n    <StyledSideBarGroupAdd>\r\n      <StyledSideBarElement>\r\n        <div style={{ paddingLeft: \"0.5rem\" }}>Add New Group</div>\r\n        <i\r\n          className={`${\r\n            toggled === false ? \"fa fa fa-plus\" : \"fa fa fa-minus\"\r\n          }`}\r\n          aria-hidden=\"true\"\r\n          onClick={() => updateToggled(toggled === true ? false : true)}\r\n        ></i>\r\n      </StyledSideBarElement>\r\n      <br></br>\r\n      <StyledSideBarGroupForm isToggled={toggled}>\r\n        <div style={{ padding: \"0.5rem 0.5rem 0.5rem 0.5rem\" }}>\r\n          <div style={{ marginBottom: \"1rem\" }}>Group Name: </div>\r\n          <input\r\n            type=\"text\"\r\n            value={props.upperNewGroup}\r\n            onInput={(e) => props.updateUpperNewGroup(e.currentTarget.value)}\r\n            style={{ marginBottom: \"1rem\" }}\r\n          ></input>\r\n          <button onClick={() => props.addNewGroup(props.upperNewGroup)}>\r\n            Add New Group\r\n          </button>\r\n        </div>\r\n      </StyledSideBarGroupForm>\r\n    </StyledSideBarGroupAdd>\r\n  );\r\n}\r\n\r\nexport default SideBarGroupAdd;\r\n","import React, { useState } from \"react\";\r\nimport { IColumn } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumn\";\r\nimport { IGrouping } from \"custom-grid-jm/Grid/Interfaces/GridBody/IGrouping\";\r\nimport { IHeader } from \"custom-grid-jm/Grid/Interfaces/GridBody/IHeader\";\r\nimport { StyledSideBar } from \"./StyledSideBar\";\r\nimport SideBarColumnAdd from \"./SideBarColumnAdd\";\r\nimport SideBarElement from \"./SideBarElement\";\r\nimport SideBarGroupAdd from \"./SideBarGroupAdd\";\r\nimport { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\nimport MoveDirection from \"./MoveDirection\";\r\n\r\nfunction SideBar(props: {\r\n  toggledSideBar: boolean;\r\n  setToggleSideBar: (value: boolean) => void;\r\n  updateHeaderData: (value: [IHeader]) => void;\r\n  headers: IHeader[];\r\n}) {\r\n  const [upperNewGroup, updateUpperNewGroup] = useState(\"\");\r\n  const [bottomNewGroup, updatebottomNewGroup] = useState(\"\");\r\n\r\n  function addNewGroupTop(newGroup: string) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.unshift({\r\n        name: newGroup,\r\n        columns: [],\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function addNewGroupBottom(newGroup: string) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.push({\r\n        name: newGroup,\r\n        columns: [],\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function removeGroup(toRemove: string) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers = header.headers.filter((grouping: IGrouping) => {\r\n        return grouping.name !== toRemove;\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function addColumn(headerName: string, newColumn: IColumn) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.forEach((grouping: IGrouping) => {\r\n        if (grouping.name === headerName) {\r\n          grouping.columns.push(newColumn);\r\n        }\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function addOptionToColumn(\r\n    newOption: IColumnOptions,\r\n    currentOption: IColumnOptions,\r\n    currentColumn: IColumn\r\n  ) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    if (currentOption.name !== \"\") {\r\n      removeOption(currentColumn, currentOption);\r\n    }\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.forEach((grouping: IGrouping) => {\r\n        grouping.columns.forEach((column: IColumn) => {\r\n          if (column.name === currentColumn.name) {\r\n            column.options === undefined\r\n              ? (column.options = [newOption])\r\n              : (column.options = column.options.concat(newOption));\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function editColumn(updatedColumn: IColumn, initialColumn: IColumn) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.forEach((grouping: IGrouping) => {\r\n        grouping.columns.forEach((column: IColumn, index: number) => {\r\n          if (column.name === initialColumn.name) {\r\n            grouping.columns[index] = updatedColumn;\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function findColumn(columnToFind: IColumn) {\r\n    let doesExist = false;\r\n\r\n    props.headers.forEach((header: IHeader) => {\r\n      header.headers.forEach((grouping: IGrouping) => {\r\n        grouping.columns.forEach((column: IColumn) => {\r\n          if (column.name === columnToFind.name) {\r\n            doesExist = true;\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    return doesExist;\r\n  }\r\n\r\n  function moveColumn(columnToMove: IColumn, direction: MoveDirection) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.forEach((grouping: IGrouping) => {\r\n        for (let column of grouping.columns) {\r\n          if (column.name === columnToMove.name) {\r\n            let index = grouping.columns.indexOf(column);\r\n\r\n            if (direction === MoveDirection.Down) {\r\n              if (index + 1 < grouping.columns.length) {\r\n                [grouping.columns[index], grouping.columns[index + 1]] = [\r\n                  grouping.columns[index + 1],\r\n                  grouping.columns[index],\r\n                ];\r\n              }\r\n            }\r\n\r\n            if (direction === MoveDirection.Up) {\r\n              if (index - 1 >= 0) {\r\n                [grouping.columns[index], grouping.columns[index - 1]] = [\r\n                  grouping.columns[index - 1],\r\n                  grouping.columns[index],\r\n                ];\r\n              }\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function moveHeader(headerToMove: IGrouping, moveDirection: MoveDirection) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    let currentHeader = currentHeaderData.filter((x: IHeader) => {\r\n      return x.name === \"firstHeader\";\r\n    })[0].headers;\r\n\r\n    let moveIndex = currentHeader.indexOf(headerToMove);\r\n\r\n    if (moveDirection === MoveDirection.Down) {\r\n      if (moveIndex + 1 < currentHeader.length) {\r\n        [currentHeader[moveIndex], currentHeader[moveIndex + 1]] = [\r\n          currentHeader[moveIndex + 1],\r\n          currentHeader[moveIndex],\r\n        ];\r\n      }\r\n    }\r\n\r\n    if (moveDirection === MoveDirection.Up) {\r\n      if (moveIndex - 1 >= 0) {\r\n        [currentHeader[moveIndex], currentHeader[moveIndex - 1]] = [\r\n          currentHeader[moveIndex - 1],\r\n          currentHeader[moveIndex],\r\n        ];\r\n      }\r\n    }\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function removeColumn(toRemove: IColumn) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.forEach((grouping: IGrouping) => {\r\n        grouping.columns = grouping.columns.filter((column: IColumn) => {\r\n          return column.name !== toRemove.name;\r\n        });\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  function removeOption(\r\n    currentColumn: IColumn,\r\n    optionToRemove: IColumnOptions\r\n  ) {\r\n    let currentHeaderData = Object.create(props.headers) as [IHeader];\r\n\r\n    currentHeaderData.forEach((header: IHeader) => {\r\n      header.headers.forEach((grouping: IGrouping) => {\r\n        grouping.columns.forEach((column: IColumn) => {\r\n          if (column.name === currentColumn.name) {\r\n            column.options = column.options?.filter(\r\n              (option: IColumnOptions) => {\r\n                return option.name !== optionToRemove.name;\r\n              }\r\n            );\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    props.updateHeaderData(currentHeaderData);\r\n  }\r\n\r\n  return (\r\n    <StyledSideBar isVisible={props.toggledSideBar}>\r\n      <i\r\n        className=\"fa fa-bars\"\r\n        aria-hidden=\"true\"\r\n        onClick={() => props.setToggleSideBar(false)}\r\n      ></i>\r\n\r\n      <SideBarGroupAdd\r\n        upperNewGroup={upperNewGroup}\r\n        updateUpperNewGroup={updateUpperNewGroup}\r\n        addNewGroup={addNewGroupTop}\r\n      ></SideBarGroupAdd>\r\n      {props.headers.map((header: IHeader) => {\r\n        return header.headers.map((grouping: IGrouping, key: number) => {\r\n          return (\r\n            <React.Fragment key={key}>\r\n              <SideBarElement\r\n                key={key}\r\n                columnOrGrouping={grouping}\r\n                removeColumn={() => removeGroup(grouping.name)}\r\n                editColumn={editColumn}\r\n                moveColumn={moveColumn}\r\n                findColumn={findColumn}\r\n                addOption={addOptionToColumn}\r\n                removeOption={removeOption}\r\n                moveGrouping={moveHeader}\r\n              ></SideBarElement>\r\n              {grouping.columns.map((column: IColumn, key: number) => {\r\n                return (\r\n                  <SideBarElement\r\n                    key={key}\r\n                    columnOrGrouping={column}\r\n                    removeColumn={removeColumn}\r\n                    editColumn={editColumn}\r\n                    moveColumn={moveColumn}\r\n                    findColumn={findColumn}\r\n                    addOption={addOptionToColumn}\r\n                    removeOption={removeOption}\r\n                    moveGrouping={moveHeader}\r\n                  ></SideBarElement>\r\n                );\r\n              })}\r\n              <SideBarColumnAdd\r\n                header={grouping.name}\r\n                addColumn={addColumn}\r\n                addColumnOption={addOptionToColumn}\r\n                findColumn={findColumn}\r\n                removeOption={removeOption}\r\n              ></SideBarColumnAdd>\r\n            </React.Fragment>\r\n          );\r\n        });\r\n      })}\r\n      <br></br>\r\n      <SideBarGroupAdd\r\n        upperNewGroup={bottomNewGroup}\r\n        updateUpperNewGroup={updatebottomNewGroup}\r\n        addNewGroup={addNewGroupBottom}\r\n      ></SideBarGroupAdd>\r\n    </StyledSideBar>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledToggleSidebar = styled.div<{ isVisible: boolean }>`\r\n  background-color: black;\r\n  flex: 0;\r\n  padding: 0.8rem;\r\n  display: ${(props) => (props.isVisible ? \"none\" : \"block\")};\r\n\r\n  @media (max-width: 85rem) {\r\n    display: none;\r\n  }\r\n\r\n  .fa {\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import { StyledToggleSidebar } from \"./StyledToggleSidebar\";\r\n\r\nfunction ToggleSideBar(props: {\r\n  toggledSideBar: boolean;\r\n  setToggleSideBar: (value: boolean) => void;\r\n}) {\r\n  return (\r\n    <StyledToggleSidebar isVisible={props.toggledSideBar}>\r\n      <i\r\n        className=\"fa fa-bars\"\r\n        aria-hidden=\"true\"\r\n        onClick={() => props.setToggleSideBar(true)}\r\n      ></i>\r\n    </StyledToggleSidebar>\r\n  );\r\n}\r\n\r\nexport default ToggleSideBar;\r\n","import { IFilter } from \"custom-grid-jm/Grid/Interfaces/GridTools/IFilter\";\r\n\r\nexport class BooleanFilter {\r\n  data: IFilter[];\r\n  constructor(data: IFilter[]) {\r\n    this.data = data;\r\n  }\r\n\r\n  applyFilters(filters: IFilter[]) {\r\n    filters.forEach((filter: IFilter) => {\r\n      this.data = this.data.filter((entry: any) => {\r\n        return filter.values?.includes(entry[filter.name]);\r\n      });\r\n    });\r\n    return this.data;\r\n  }\r\n}\r\n","import { IFilter } from \"custom-grid-jm/Grid/Interfaces/GridTools/IFilter\";\r\n\r\nexport class DateFilter {\r\n  data: any[];\r\n\r\n  constructor(data: any[]) {\r\n    this.data = data;\r\n  }\r\n\r\n  applyFilters(filters: IFilter[]) {\r\n    filters.forEach((x: IFilter) => {\r\n      this.data = this.data.filter((y) => {\r\n        switch (x.operator) {\r\n          case 0:\r\n            return (\r\n              new Date(y[x.name]).toDateString() ===\r\n              new Date(x.values[0]).toDateString()\r\n            );\r\n          case 1:\r\n            return new Date(y[x.name]) > new Date(x.values[0]);\r\n          case 2:\r\n            return new Date(y[x.name]) < new Date(x.values[0]);\r\n          case 3:\r\n            return (\r\n              new Date(y[x.name]).toDateString() !==\r\n              new Date(x.values[0]).toDateString()\r\n            );\r\n          case 4:\r\n            return (\r\n              new Date(x.values[0]) <= new Date(y[x.name]) &&\r\n              new Date(y[x.name]) <= new Date(x.values[1])\r\n            );\r\n          default:\r\n            return false;\r\n        }\r\n      });\r\n    });\r\n    return this.data;\r\n  }\r\n}\r\n","import { IFilter } from \"custom-grid-jm/Grid/Interfaces/GridTools/IFilter\";\r\n\r\nexport class NumberFilter {\r\n  data: any[];\r\n  constructor(data: any[]) {\r\n    this.data = data;\r\n  }\r\n\r\n  applyFilters(filters: IFilter[]) {\r\n    filters.forEach((x: IFilter) => {\r\n      this.data = this.data.filter((y: any) => {\r\n        let value = x.values === undefined ? 0 : parseInt(x.values.toString());\r\n        switch (x.operator) {\r\n          case 0:\r\n            return parseInt(y[x.name]) === value;\r\n          case 1:\r\n            return parseInt(y[x.name]) !== value;\r\n          case 2:\r\n            return parseInt(y[x.name]) < value;\r\n          case 3:\r\n            return parseInt(y[x.name]) > value;\r\n          default:\r\n            return parseInt(y[x.name]) === value;\r\n        }\r\n      });\r\n    });\r\n\r\n    return this.data;\r\n  }\r\n}\r\n","import { IFilter } from \"custom-grid-jm/Grid/Interfaces/GridTools/IFilter\";\r\nimport { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\n\r\nexport class SelectionFilter {\r\n  data: any[];\r\n\r\n  constructor(data: any[]) {\r\n    this.data = data;\r\n  }\r\n\r\n  applyFilters(filters: IFilter[]) {\r\n    filters.forEach((filter: IFilter): void => {\r\n      let all_filters = Array<string>();\r\n\r\n      filters.map((x: IFilter) => {\r\n        return x.values.map((y: IColumnOptions) => {\r\n          return all_filters.push(y.name);\r\n        });\r\n      });\r\n\r\n      this.data = this.data.filter((entry: any) => {\r\n        return all_filters.includes(entry[filter.name]);\r\n      });\r\n    });\r\n\r\n    return this.data;\r\n  }\r\n}\r\n","import { IFilter } from \"custom-grid-jm/Grid/Interfaces/GridTools/IFilter\";\r\n\r\nexport class StringFilter {\r\n  data: any[];\r\n  constructor(data: any[]) {\r\n    this.data = data;\r\n  }\r\n\r\n  applyFilters(filters: IFilter[]) {\r\n    filters.forEach((x: IFilter) => {\r\n      this.data = this.data.filter((y: any) => {\r\n        switch (x.operator) {\r\n          case 0:\r\n            return y[x.name].includes(x.values);\r\n          case 1:\r\n            return !y[x.name].includes(x.values);\r\n          case 2:\r\n            return y[x.name].startsWith(x.values);\r\n          case 3:\r\n            return y[x.name].endsWith(x.values);\r\n          case 4:\r\n            return y[x.name] === x.values;\r\n          case 5:\r\n            return y[x.name] !== x.values;\r\n          default:\r\n            return y[x.name].includes(x.values);\r\n        }\r\n      });\r\n    });\r\n    return this.data;\r\n  }\r\n}\r\n","import { IColumn } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumn\";\r\nimport { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\nimport { IGrouping } from \"custom-grid-jm/Grid/Interfaces/GridBody/IGrouping\";\r\nimport { IHeader } from \"custom-grid-jm/Grid/Interfaces/GridBody/IHeader\";\r\n\r\nconst ALPHABET = \"abcdefghiklmnopqrstuvwxyz\";\r\nconst TOTAL_ENTRIES = 100;\r\n\r\nexport class DummyData {\r\n  generateDummyData(headerData: IHeader[]) {\r\n    let dummyData = [] as any;\r\n\r\n    let allKeys = headerData\r\n      .map((x: IHeader) => {\r\n        return x.headers.map((y: IGrouping) => {\r\n          return y.columns.map((z: IColumn) => {\r\n            return z;\r\n          });\r\n        });\r\n      })\r\n      .flat(3);\r\n\r\n    let count = new Array(TOTAL_ENTRIES).fill(0).map((_, i) => {\r\n      return i + 1;\r\n    });\r\n\r\n    count.map((x: any, valueCount: number) => {\r\n      let current: { [x: string]: any } = {};\r\n\r\n      allKeys.forEach((x: IColumn, y: number) => {\r\n        switch (x.type) {\r\n          case undefined:\r\n          case \"text\":\r\n            switch (x.name) {\r\n              case \"Email\":\r\n                current[x.name] = x.name + \"@edomain.com\";\r\n                break;\r\n              default:\r\n                current[x.name] =\r\n                  x.name +\r\n                  ALPHABET[Math.floor(Math.random() * 20)] +\r\n                  ALPHABET[Math.floor(Math.random() * 20)];\r\n            }\r\n            break;\r\n          case \"boolean\":\r\n            current[x.name] = Math.random() >= 0.5;\r\n            break;\r\n          case \"number\":\r\n            switch (x.name) {\r\n              case \"Nr\":\r\n                current[x.name] = valueCount;\r\n                break;\r\n              default:\r\n                current[x.name] = Math.floor(\r\n                  Math.random() * 1000000000\r\n                ).toString();\r\n            }\r\n            break;\r\n          case \"date\":\r\n            let generatedDate = this.generateRandomDate(\r\n              new Date(1980, 0, 0),\r\n              new Date(2000, 0, 0)\r\n            );\r\n\r\n            generatedDate.setHours(0, 0, 0, 0);\r\n            current[x.name] = generatedDate.toString();\r\n            break;\r\n          case \"select\":\r\n            let options = this.extractSelectionOptions(x, headerData);\r\n            current[x.name] =\r\n              options[Math.floor(Math.random() * options.length)];\r\n            break;\r\n        }\r\n      });\r\n\r\n      return dummyData.push(current);\r\n    });\r\n\r\n    return dummyData;\r\n  }\r\n\r\n  extractSelectionOptions(requiredColumn: IColumn, header: IHeader[]) {\r\n    let options = header\r\n      .map((header: IHeader) => {\r\n        return header.headers.map((columnGrouping: IGrouping) => {\r\n          return columnGrouping.columns.map((column: IColumn) => {\r\n            return requiredColumn.name === column.name &&\r\n              requiredColumn.options !== undefined\r\n              ? column.options\r\n              : undefined;\r\n          });\r\n        });\r\n      })\r\n      .flat(3)\r\n      .filter((x: IColumnOptions) => {\r\n        return x !== undefined;\r\n      })\r\n      .map((x: IColumnOptions) => {\r\n        return x.name;\r\n      });\r\n\r\n    return options;\r\n  }\r\n\r\n  generateRandomDate(start: Date, end: Date) {\r\n    return new Date(\r\n      start.getTime() + Math.random() * (end.getTime() - start.getTime())\r\n    );\r\n  }\r\n}\r\n","import { BooleanFilter } from \"./DataFilters/BooleanFilter\";\r\nimport { DateFilter } from \"./DataFilters/DateFilter\";\r\nimport { ISortStats } from \"custom-grid-jm/Grid/Interfaces/ISortStats\";\r\nimport { IDataSource } from \"custom-grid-jm/Grid/Interfaces/GridData/IDataSource\";\r\nimport { IHeader } from \"custom-grid-jm/Grid/Interfaces/GridBody/IHeader\";\r\nimport { IFilter } from \"custom-grid-jm/Grid/Interfaces/GridTools/IFilter\";\r\nimport { NumberFilter } from \"./DataFilters/NumberFilter\";\r\nimport { SelectionFilter } from \"./DataFilters/SelectionFilter\";\r\nimport { StringFilter } from \"./DataFilters/StringFilter\";\r\nimport { DummyData } from \"./GridStructure/DummyData\";\r\n\r\nexport class DataSource implements IDataSource {\r\n  data: any[];\r\n  constructor(headerData: IHeader[]) {\r\n    this.data = new DummyData().generateDummyData(headerData);\r\n  }\r\n\r\n  _sort_function(key: string) {\r\n    return function name(a: any, b: any) {\r\n      let x = a[key];\r\n      let y = b[key];\r\n      return x < y ? -1 : x > y ? 1 : 0;\r\n    };\r\n  }\r\n\r\n  _sort_date_function(key: string) {\r\n    return function compare(a: any, b: any) {\r\n      let dateA = new Date(a[key]);\r\n      let dateB = new Date(b[key]);\r\n      return dateA.getTime() < dateB.getTime()\r\n        ? -1\r\n        : dateA.getTime() > dateB.getTime()\r\n        ? 1\r\n        : 0;\r\n    };\r\n  }\r\n\r\n  getHeaders() {}\r\n\r\n  getTotal(sort: ISortStats, filters: IFilter[]) {\r\n    let returned_data = Object.create(this.data);\r\n\r\n    let string_filters = Array<IFilter>();\r\n\r\n    let number_filters = Array<IFilter>();\r\n\r\n    if (filters !== undefined) {\r\n      filters.forEach((x: IFilter) => {\r\n        switch (x.type) {\r\n          case undefined:\r\n          case \"text\":\r\n            string_filters.push(x);\r\n            break;\r\n          case \"number\":\r\n            number_filters.push(x);\r\n            break;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (string_filters.length > 0) {\r\n      returned_data = new StringFilter(returned_data).applyFilters(\r\n        string_filters\r\n      );\r\n    }\r\n    if (number_filters.length > 0) {\r\n      returned_data = new NumberFilter(returned_data).applyFilters(\r\n        number_filters\r\n      );\r\n    }\r\n    if (\r\n      filters.some((x: IFilter) => {\r\n        return (\r\n          x.type === \"select\" && x.values !== undefined && x.values.length > 0\r\n        );\r\n      })\r\n    ) {\r\n      returned_data = new SelectionFilter(returned_data).applyFilters(\r\n        filters.filter((x: IFilter) => {\r\n          return x.type === \"select\";\r\n        })\r\n      );\r\n    }\r\n    if (\r\n      filters.some((x: IFilter) => {\r\n        return (\r\n          x.type === \"boolean\" && x.values !== undefined && x.values.length > 0\r\n        );\r\n      })\r\n    ) {\r\n      returned_data = new BooleanFilter(returned_data).applyFilters(\r\n        filters.filter((x: IFilter) => {\r\n          return x.type === \"boolean\";\r\n        })\r\n      );\r\n    }\r\n    if (\r\n      filters.some((x: IFilter) => {\r\n        return (\r\n          x.type === \"date\" && x.values !== undefined && x.values.length > 0\r\n        );\r\n      })\r\n    ) {\r\n      returned_data = new DateFilter(returned_data).applyFilters(\r\n        filters.filter((x: IFilter) => {\r\n          return x.type === \"date\";\r\n        })\r\n      );\r\n    }\r\n\r\n    if (sort !== undefined) {\r\n      if (sort.field_id) {\r\n        switch (sort.sort_type) {\r\n          case \"asc\":\r\n            returned_data.sort(this._sort_function(sort.field_id));\r\n            break;\r\n          case \"desc\":\r\n            returned_data.sort(this._sort_function(sort.field_id)).reverse();\r\n            break;\r\n          default:\r\n            return returned_data.length;\r\n        }\r\n      }\r\n    }\r\n\r\n    return returned_data.length;\r\n  }\r\n\r\n  get(sort: ISortStats, filters: IFilter[], page: number, pageIndex: number) {\r\n    let currentPage = page * pageIndex;\r\n\r\n    let returned_data = Object.create(this.data);\r\n\r\n    let string_filters = Array<IFilter>();\r\n\r\n    let number_filters = Array<IFilter>();\r\n\r\n    if (filters !== undefined) {\r\n      filters.forEach((x: IFilter) => {\r\n        switch (x.type) {\r\n          case undefined:\r\n          case \"text\":\r\n            string_filters.push(x);\r\n            break;\r\n          case \"number\":\r\n            number_filters.push(x);\r\n            break;\r\n        }\r\n      });\r\n    }\r\n    if (string_filters.length > 0) {\r\n      returned_data = new StringFilter(returned_data).applyFilters(\r\n        string_filters\r\n      );\r\n    }\r\n    if (number_filters.length > 0) {\r\n      returned_data = new NumberFilter(returned_data).applyFilters(\r\n        number_filters\r\n      );\r\n    }\r\n    if (\r\n      filters.some((x: IFilter) => {\r\n        return (\r\n          x.type === \"select\" && x.values !== undefined && x.values.length > 0\r\n        );\r\n      })\r\n    ) {\r\n      returned_data = new SelectionFilter(returned_data).applyFilters(\r\n        filters.filter((x: IFilter) => {\r\n          return x.type === \"select\";\r\n        })\r\n      );\r\n    }\r\n    if (\r\n      filters.some((x: IFilter) => {\r\n        return (\r\n          x.type === \"boolean\" && x.values !== undefined && x.values.length > 0\r\n        );\r\n      })\r\n    ) {\r\n      returned_data = new BooleanFilter(returned_data).applyFilters(\r\n        filters.filter((x: IFilter) => {\r\n          return x.type === \"boolean\";\r\n        })\r\n      );\r\n    }\r\n    if (\r\n      filters.some((x: IFilter) => {\r\n        return (\r\n          x.type === \"date\" && x.values !== undefined && x.values.length > 0\r\n        );\r\n      })\r\n    ) {\r\n      returned_data = new DateFilter(returned_data).applyFilters(\r\n        filters.filter((x: IFilter) => {\r\n          return x.type === \"date\";\r\n        })\r\n      );\r\n    }\r\n    if (sort !== undefined) {\r\n      if (sort.field_id) {\r\n        switch (sort.sort_type) {\r\n          case \"asc\":\r\n            switch (sort.field_type) {\r\n              case \"date\":\r\n                returned_data.sort(this._sort_date_function(sort.field_id));\r\n                break;\r\n              default:\r\n                returned_data.sort(this._sort_function(sort.field_id));\r\n                break;\r\n            }\r\n            break;\r\n          case \"desc\":\r\n            switch (sort.field_type) {\r\n              case \"date\":\r\n                returned_data\r\n                  .sort(this._sort_date_function(sort.field_id))\r\n                  .reverse();\r\n                break;\r\n              default:\r\n                returned_data\r\n                  .sort(this._sort_function(sort.field_id))\r\n                  .reverse();\r\n                break;\r\n            }\r\n            break;\r\n          default:\r\n            return returned_data.slice(page, pageIndex);\r\n        }\r\n      }\r\n    }\r\n\r\n    return returned_data.slice(page * pageIndex, currentPage + pageIndex);\r\n  }\r\n}\r\n","import { IColumnOptions } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumnOptions\";\r\nimport { MinimumVisibility } from \"custom-grid-jm/Grid/CustomTypes/ColumnVisibility\";\r\nimport { ColumnSizes } from \"custom-grid-jm/Grid/CustomTypes/ColumnSizes\";\r\nimport { ColumnCollapsable } from \"custom-grid-jm/Grid/CustomTypes/ColumnCollapsable\";\r\nimport { ColumnTypes } from \"custom-grid-jm/Grid/CustomTypes/ColumnTypes\";\r\nimport { IHeader } from \"custom-grid-jm/Grid/Interfaces/GridBody/IHeader\";\r\nimport { IGrouping } from \"custom-grid-jm/Grid/Interfaces/GridBody/IGrouping\";\r\nimport { IColumn } from \"custom-grid-jm/Grid/Interfaces/GridBody/IColumn\";\r\n\r\nlet FirstOption = {} as IColumnOptions;\r\nFirstOption.name = \"Disponibil\";\r\nFirstOption.icon = \"fa fa-circle\";\r\n\r\nlet SecondOption = {} as IColumnOptions;\r\nSecondOption.name = \"Ocupat\";\r\nSecondOption.icon = \"fa fa-dot-circle-o\";\r\n\r\nlet ThirdOption = {} as IColumnOptions;\r\nThirdOption.name = \"Offline\";\r\nThirdOption.icon = \"fa fa-circle-o\";\r\n\r\nlet Nr = {} as IColumn;\r\nNr.name = \"Nr\";\r\nNr.size = ColumnSizes.SmallColumn;\r\nNr.type = ColumnTypes.number;\r\nNr.collapsable = ColumnCollapsable.fixed;\r\nNr.minVisibility = MinimumVisibility.LargeVisible;\r\n\r\nlet Select = {} as IColumn;\r\nSelect.name = \"Status\";\r\nSelect.size = ColumnSizes.StandardColumn;\r\nSelect.type = ColumnTypes.select;\r\nSelect.options = [FirstOption, SecondOption, ThirdOption];\r\nSelect.collapsable = ColumnCollapsable.fixed;\r\nSelect.minVisibility = MinimumVisibility.SmallVisible;\r\n\r\nlet Prenume = {} as IColumn;\r\nPrenume.name = \"Prenume\";\r\nPrenume.size = ColumnSizes.StandardColumn;\r\nPrenume.collapsable = ColumnCollapsable.fixed;\r\nPrenume.minVisibility = MinimumVisibility.SmallVisible;\r\n\r\nlet Nume = {} as IColumn;\r\nNume.name = \"Nume\";\r\nNume.size = ColumnSizes.StandardColumn;\r\nNume.collapsable = ColumnCollapsable.fixed;\r\nNume.minVisibility = MinimumVisibility.SmallVisible;\r\n\r\nlet Valid = {} as IColumn;\r\nValid.name = \"Valid\";\r\nValid.type = ColumnTypes.boolean;\r\nValid.size = ColumnSizes.SmallColumn;\r\nValid.collapsable = ColumnCollapsable.collapsable;\r\nValid.minVisibility = MinimumVisibility.MaxVisible;\r\n\r\nlet Email = {} as IColumn;\r\nEmail.name = \"Email\";\r\nEmail.size = ColumnSizes.StandardColumn;\r\nEmail.collapsable = ColumnCollapsable.collapsable;\r\nEmail.minVisibility = MinimumVisibility.SmallVisible;\r\n\r\nlet NrTelefon = {} as IColumn;\r\nNrTelefon.name = \"Nr Telefon\";\r\nNrTelefon.size = ColumnSizes.StandardColumn;\r\nNrTelefon.type = ColumnTypes.number;\r\nNrTelefon.collapsable = ColumnCollapsable.collapsable;\r\nNrTelefon.minVisibility = MinimumVisibility.SmallVisible;\r\n\r\nlet DataNasterii = {} as IColumn;\r\nDataNasterii.name = \"Data Nasterii\";\r\nDataNasterii.size = ColumnSizes.StandardColumn;\r\nDataNasterii.type = ColumnTypes.date;\r\nDataNasterii.collapsable = ColumnCollapsable.collapsable;\r\nDataNasterii.minVisibility = MinimumVisibility.LargeVisible;\r\n\r\nlet Detalii = {} as IColumn;\r\nDetalii.name = \"Detalii\";\r\nDetalii.size = ColumnSizes.StandardColumn;\r\nDetalii.collapsable = ColumnCollapsable.collapsable;\r\nDetalii.minVisibility = MinimumVisibility.Invisible;\r\n\r\nlet firstHeader = {} as IGrouping;\r\nfirstHeader.name = \"Utilizator\";\r\nfirstHeader.columns = [Nr, Select, Prenume, Nume, Valid];\r\n\r\nlet secondHeader = {} as IGrouping;\r\nsecondHeader.name = \"Detalii\";\r\nsecondHeader.columns = [Email, NrTelefon, DataNasterii, Detalii];\r\n\r\nlet header = {} as IHeader;\r\nheader.name = \"firstHeader\";\r\nheader.headers = [firstHeader, secondHeader];\r\n\r\nexport const initialHeaders = [header];\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledApp = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport Grid from \"custom-grid-jm/Grid/Grid\";\r\nimport SideBar from \"./SideBar/SideBar\";\r\nimport ToggleSideBar from \"./SideBar/ToggleSidebar\";\r\nimport { IHeader } from \"custom-grid-jm/Grid/Interfaces/GridBody/IHeader\";\r\nimport { DataSource } from \"./DataSource/DataSource\";\r\nimport { initialHeaders } from \"./DataSource/GridStructure/HeadersData\";\r\nimport { StyledApp } from \"./StyledApp\";\r\n\r\nconst PAGE_SIZE = 11;\r\nconst CACHE_SIZE = 33;\r\n\r\nfunction App() {\r\n  const [toggledSideBar, setToggleSideBar] = useState(false);\r\n  const [headerData, updateHeaderData] = useState<IHeader[]>(initialHeaders);\r\n\r\n  return (\r\n    <StyledApp>\r\n      <ToggleSideBar\r\n        toggledSideBar={toggledSideBar}\r\n        setToggleSideBar={setToggleSideBar}\r\n      ></ToggleSideBar>\r\n      <SideBar\r\n        toggledSideBar={toggledSideBar}\r\n        setToggleSideBar={setToggleSideBar}\r\n        updateHeaderData={updateHeaderData}\r\n        headers={headerData}\r\n      ></SideBar>\r\n      <Grid\r\n        data={new DataSource(headerData)}\r\n        headers={headerData}\r\n        pageSize={PAGE_SIZE}\r\n        cacheSize={CACHE_SIZE}\r\n      />\r\n    </StyledApp>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}